/**
 * Object that represents a query to the Form API
 * 
 * TODO: This is based off of /LEAF_Request_Portal/js/formQuery.js. Eventually that file should be deprecated 
 * in favor of this one. This version removes any built-in ajax calls and is made available to the rest of the
 * javascript APIs.
 */

function FormQuery() {
    this.terms = [];
    this.joins = [];
    this.sort = { column: "", direction: "" };
    this.getData = [];
    // this.limit = 0;
    // this.limitOffset = 0;
}

/**
 * Build a JSON object that represents a Form query
 * 
 * @returns object  JSON object that represetns a Form query
 */
FormQuery.prototype.buildQuery = function () {

    var res = {
        terms: this.terms,
        joins: this.joins,
        sort: this.sort,
        getData: this.getData
    };

    if (this.limit > 0) {
        res["limit"] = this.limit;

        if (this.limitOffset > 0) {
            res["limitOffset"] = this.limitOffset;
        }
    }

    return res;
}

/**
 * Reset any search terms, joins, sort, and getData
 */
FormQuery.prototype.reset = function() {
    this.terms = [];
    this.joins = [];
    this.sort = { column: "", direction: "" };
    this.getData = [];
}

/**
 * Add a new search term
 * 
 * @param id        string  columnID
 * @param operator  string  SQL comparison operator
 * @param match     string  search term to match on
 */
FormQuery.prototype.addTerm = function(id, operator, match) {
    this.terms.push({
        "id": id,
        "operator": operator,
        "match": match
    });
}

/**
 * Add a new search term for data table
 * 
 * @param id            string  columnID / 'data' to search data table / 'dependencyID' to search records_dependencies data, matching on 'filled'
 * @param indicatorID   string  indicatorID / dependencyID / "0" to search all indicators
 * @param operator      string  SQL comparison operator
 * @param match         string  search term to match on
 */
FormQuery.prototype.addDataTerm = function(id, indicatorID, operator, match) {
    this.terms.push({
        "id": id,
        "indicatorID": indicatorID,
        "operator": operator,
        "match": match
    });
}

/**
 * Import query generated by formSearch
 * 
 * @param input object  The JSON query object generated by formSearch
 */
FormQuery.prototype.importQuery = function(input) {
    for (var i in input.terms) {
        switch (Object.keys(input.terms[i]).length) {
            case 3:
                addTerm(input.terms[i].id, input.terms[i].operator, input.terms[i].match);
                break;
            case 4:
                addDataTerm(input.terms[i].id, input.terms[i].indicatorID, input.terms[i].operator, input.terms[i].match);
                break;
            default:
                console.log('Format error');
                break;
        }
    }

    for (var i in input.joins) {
        join(input.joins[i]);
    }

    for (var i in input.getData) {
        getData(input.getData[i]);
    }
}

/**
 * Limit number of results
 * 
 * @param limit     int the number of records to limit to
 * @param offset    int the number of records to offset (optional)
 */
FormQuery.prototype.setLimit = function(limit, offset) {
    this.limit = limit;

    if (offset !== undefined) {
        this.offset = offset;
        setLimitOffset(offset);
    }
}

/**
 * Offset results
 * 
 * @param offset    int the nubmer of records to offset
 */
FormQuery.prototype.setLimitOffset = function(offset) {
    this.limitOffset = offset;
}

/**
 * Join table
 * 
 * @param table string  the table name
 */
FormQuery.prototype.addJoin = function(table) {
    if (joins.indexOf(table) == -1) {
        joins.push(table);
    }
}

/**
 * Get data
 * 
 * @param indicatorID   string  the indicatorID to get data for
 * @memberOf LeafFormQuery
 */
FormQuery.prototype.addGetData = function(indicatorID) {
    if (this.getData.indexOf(indicatorID) == -1) {
        this.getData.push(indicatorID);
    }
}

/**
 * Sort results
 * 
 * @param column    string  the column to sort
 * @param direction string  the direction to sort (ASC,DESC)
 */
FormQuery.prototype.sort = function(column, direction) {
    sort.column = column;
    sort.direction = direction;
}